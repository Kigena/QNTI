#!/usr/bin/env python3
"""
QNTI Vision Trading - Working Demonstration
==========================================

This demonstrates the improved parsing logic and core functionality.
"""

import re
from datetime import datetime
from typing import Dict, Any, Optional

# Mock the necessary classes for demonstration
class VisionTradeStatus:
    PENDING = "PENDING"
    MONITORING = "MONITORING"
    EXECUTED = "EXECUTED"
    CANCELLED = "CANCELLED"

class MockVisionTrader:
    """Mock version of QNTIVisionTrader for demonstration"""
    
    def __init__(self):
        self.config = {
            "risk_percentage": 2.0,
            "min_confidence_threshold": 0.7,
            "max_concurrent_trades": 3,
            "trade_timeout_hours": 24
        }
        
    def _extract_directional_bias(self, text: str) -> Dict:
        """Extract directional bias information - IMPROVED VERSION"""
        bias = {}
        
        # Extract primary bias - updated patterns for your format
        bias_patterns = [
            r"Primary Bias:\*\*\s*(\w+)",
            r"\*\*Primary Bias:\*\*\s*(\w+)",
            r"Primary Bias:\s*(\w+)",
            r"\*\*Primary Bias:\*\*\s*(\w+)\s*\(",
        ]
        
        for pattern in bias_patterns:
            bias_match = re.search(pattern, text, re.IGNORECASE)
            if bias_match:
                bias["primary_bias"] = bias_match.group(1)
                break
        
        # Extract conviction level - updated patterns
        conviction_patterns = [
            r"\(Conviction:\s*(\d+)%\)",
            r"\((\d+)%\s*conviction\)",
            r"conviction:\s*(\d+)%",
            r"Conviction:\s*(\d+)%"
        ]
        
        for pattern in conviction_patterns:
            conviction_match = re.search(pattern, text, re.IGNORECASE)
            if conviction_match:
                bias["conviction"] = conviction_match.group(1)
                break
            
        return bias
    
    def _extract_trading_plan(self, text: str) -> Dict:
        """Extract trading plan details - IMPROVED VERSION"""
        plan = {}
        
        # Extract entry zone - improved patterns for your format
        entry_patterns = [
            r"\*\*Entry Zone:\*\*\s*(\d+\.?\d*)\s*-\s*(\d+\.?\d*)",
            r"Entry Zone:\s*(\d+\.?\d*)\s*-\s*(\d+\.?\d*)",
            r"Entry:\s*(\d+\.?\d*)\s*-\s*(\d+\.?\d*)",
            r"entry.*?(\d+\.?\d*)\s*-\s*(\d+\.?\d*)"
        ]
        
        for pattern in entry_patterns:
            entry_match = re.search(pattern, text, re.IGNORECASE)
            if entry_match:
                try:
                    lower = float(entry_match.group(1))
                    upper = float(entry_match.group(2))
                    plan["entry_zone"] = {
                        "lower": min(lower, upper),
                        "upper": max(lower, upper)
                    }
                    break
                except ValueError:
                    continue
        
        # Extract stop loss - improved patterns
        sl_patterns = [
            r"\*\*Stop Loss:\*\*\s*(\d+\.?\d*)",
            r"Stop Loss:\s*(\d+\.?\d*)",
            r"SL:\s*(\d+\.?\d*)",
            r"stop.*?(\d+\.?\d*)\s*\(",
            r"Stop:\s*(\d+\.?\d*)"
        ]
        
        for pattern in sl_patterns:
            sl_match = re.search(pattern, text, re.IGNORECASE)
            if sl_match:
                try:
                    plan["stop_loss"] = float(sl_match.group(1))
                    break
                except ValueError:
                    continue
        
        # Extract take profits - improved patterns
        tp_patterns = [
            r"\*\*Take Profit (\d+):\*\*\s*(\d+\.?\d*)",
            r"Take Profit (\d+):\s*(\d+\.?\d*)",
            r"TP(\d+):\s*(\d+\.?\d*)",
            r"tp(\d+).*?(\d+\.?\d*)"
        ]
        
        plan["take_profits"] = {}
        for pattern in tp_patterns:
            tp_matches = re.findall(pattern, text, re.IGNORECASE)
            for tp_num, tp_price in tp_matches:
                try:
                    plan["take_profits"][f"tp{tp_num}"] = float(tp_price)
                except ValueError:
                    continue
                
        return plan
    
    def _extract_risk_factors(self, text: str) -> Dict:
        """Extract risk factors and invalidation levels - IMPROVED VERSION"""
        risks = {}
        
        # Extract invalidation level - improved patterns
        invalid_patterns = [
            r"above.*?(\d+\.?\d*)",
            r"invalidation.*?(\d+\.?\d*)",
            r"invalid.*?(\d+\.?\d*)",
            r"resistance structure.*?(\d+\.?\d*)"
        ]
        
        for pattern in invalid_patterns:
            invalid_match = re.search(pattern, text, re.IGNORECASE)
            if invalid_match:
                try:
                    risks["invalidation_level"] = float(invalid_match.group(1))
                    break
                except ValueError:
                    continue
            
        return risks
    
    def parse_smc_analysis(self, analysis_text: str, symbol: str) -> Dict[str, Any]:
        """Parse SMC analysis text into structured data"""
        
        result = {
            "symbol": symbol,
            "timestamp": datetime.now(),
            "directional_bias": self._extract_directional_bias(analysis_text),
            "trading_plan": self._extract_trading_plan(analysis_text),
            "risk_factors": self._extract_risk_factors(analysis_text),
            "confidence": 0.8,  # Default confidence
            "smc_elements": self._extract_smc_elements(analysis_text)
        }
        
        return result
    
    def _extract_smc_elements(self, text: str) -> Dict:
        """Extract SMC elements from analysis"""
        elements = {}
        
        # Extract order blocks
        ob_pattern = r"Order Blocks.*?(\d+\.?\d*)\s*-\s*(\d+\.?\d*)"
        ob_match = re.search(ob_pattern, text, re.IGNORECASE)
        if ob_match:
            elements["order_blocks"] = {
                "lower": float(ob_match.group(1)),
                "upper": float(ob_match.group(2))
            }
        
        # Extract FVG
        fvg_pattern = r"FVG.*?(\d+\.?\d*)\s*-\s*(\d+\.?\d*)"
        fvg_match = re.search(fvg_pattern, text, re.IGNORECASE)
        if fvg_match:
            elements["fvg"] = {
                "lower": float(fvg_match.group(1)),
                "upper": float(fvg_match.group(2))
            }
        
        return elements

def demonstrate_parsing_improvements():
    """Demonstrate the improved parsing logic"""
    
    print("üîç VISION TRADING PARSING IMPROVEMENTS")
    print("=" * 60)
    
    # Your exact SMC analysis format
    sample_analysis = """
**Market Structure Analysis (HTF):**
- **Trend:** Bearish on Daily/H4 timeframes
- **Market Phase:** Range-bound correction within downtrend  
- **Structural Evidence:** Clear BOS to the downside confirmed

**SMC Elements:**
- **CHoCH:** Confirmed on H1 with price breaking previous structure
- **BOS:** Strong bearish break validated on H4
- **Order Blocks:** Bearish OB at 1.0950-1.0970 acting as resistance
- **FVG:** Fair Value Gap identified at 1.0920-1.0935
- **Liquidity Zones:** Sell-side liquidity targeted below 1.0880

**Directional Bias & Confluence:**
- **Primary Bias:** Bearish (Conviction: 80%)
- **Secondary Consideration:** Range-bound scenario (20%)

**Trading Plan:**
- **Entry Zone:** 1.0950-1.0970 (resistance area)
- **Stop Loss:** 1.0985 (above resistance structure)
- **Take Profit 1:** 1.0920 (FVG fill)
- **Take Profit 2:** 1.0880 (liquidity target)

**Risk Factors & Invalidation:**
- **Invalidation:** Above 1.0985 (structure break)
- **Risk Level:** Medium (clear structure but range-bound)
"""
    
    print("\nüìù SAMPLE SMC ANALYSIS:")
    print("‚îÄ" * 40)
    print(sample_analysis.strip())
    
    # Create mock trader and test parsing
    trader = MockVisionTrader()
    
    print("\nüîß PARSING RESULTS:")
    print("‚îÄ" * 40)
    
    # Test directional bias extraction
    bias = trader._extract_directional_bias(sample_analysis)
    print(f"‚úÖ Directional Bias:")
    print(f"   ‚Ä¢ Primary Bias: {bias.get('primary_bias', 'NOT FOUND')}")
    print(f"   ‚Ä¢ Conviction: {bias.get('conviction', 'NOT FOUND')}%")
    
    # Test trading plan extraction
    plan = trader._extract_trading_plan(sample_analysis)
    print(f"\n‚úÖ Trading Plan:")
    
    if plan.get('entry_zone'):
        entry = plan['entry_zone']
        print(f"   ‚Ä¢ Entry Zone: {entry['lower']} - {entry['upper']}")
    else:
        print("   ‚Ä¢ Entry Zone: NOT FOUND")
    
    if plan.get('stop_loss'):
        print(f"   ‚Ä¢ Stop Loss: {plan['stop_loss']}")
    else:
        print("   ‚Ä¢ Stop Loss: NOT FOUND")
    
    take_profits = plan.get('take_profits', {})
    if take_profits:
        for tp_key, tp_value in take_profits.items():
            print(f"   ‚Ä¢ {tp_key.upper()}: {tp_value}")
    else:
        print("   ‚Ä¢ Take Profits: NOT FOUND")
    
    # Test risk factors
    risks = trader._extract_risk_factors(sample_analysis)
    print(f"\n‚úÖ Risk Factors:")
    if risks.get('invalidation_level'):
        print(f"   ‚Ä¢ Invalidation Level: {risks['invalidation_level']}")
    else:
        print("   ‚Ä¢ Invalidation Level: NOT FOUND")
    
    # Test full parsing
    print(f"\nüéØ COMPLETE PARSING TEST:")
    print("‚îÄ" * 40)
    
    parsed = trader.parse_smc_analysis(sample_analysis, "EURUSD")
    
    # Check if we have enough for a trade
    has_bias = bool(parsed['directional_bias'].get('primary_bias'))
    has_entry = bool(parsed['trading_plan'].get('entry_zone'))
    has_stop_loss = bool(parsed['trading_plan'].get('stop_loss'))
    
    print(f"   ‚Ä¢ Symbol: {parsed['symbol']}")
    print(f"   ‚Ä¢ Has Valid Bias: {'‚úÖ' if has_bias else '‚ùå'}")
    print(f"   ‚Ä¢ Has Entry Zone: {'‚úÖ' if has_entry else '‚ùå'}")
    print(f"   ‚Ä¢ Has Stop Loss: {'‚úÖ' if has_stop_loss else '‚ùå'}")
    
    trade_ready = has_bias and has_entry and has_stop_loss
    print(f"\n   üéØ TRADE READY: {'‚úÖ YES' if trade_ready else '‚ùå NO'}")
    
    if trade_ready:
        # Calculate trade parameters
        bias = parsed['directional_bias']['primary_bias'].upper()
        direction = "SELL" if bias in ["BEARISH", "SHORT", "SELL"] else "BUY"
        entry_zone = parsed['trading_plan']['entry_zone']
        
        print(f"\n   üìä PROPOSED TRADE:")
        print(f"      ‚Ä¢ Direction: {direction}")
        print(f"      ‚Ä¢ Entry: {entry_zone['lower']} - {entry_zone['upper']}")
        print(f"      ‚Ä¢ Stop Loss: {parsed['trading_plan']['stop_loss']}")
        print(f"      ‚Ä¢ Risk: 2% of account")
        print(f"      ‚Ä¢ Confidence: {parsed['confidence']*100:.0f}%")

def show_usage_guide():
    """Show how to use the vision trading system"""
    
    print("\n\nüìö USAGE GUIDE")
    print("=" * 60)
    
    print("\nüîπ DASHBOARD INTEGRATION:")
    print("   1. Access dashboard at: http://localhost:5003")
    print("   2. Upload chart image in 'AI Vision Analysis' panel")
    print("   3. Run analysis - look for SMC format output")
    print("   4. Use vision trading buttons when analysis contains:")
    print("      ‚Ä¢ Primary Bias (Bearish/Bullish)")
    print("      ‚Ä¢ Entry Zone (price range)")
    print("      ‚Ä¢ Stop Loss level")
    print("      ‚Ä¢ Take Profit levels")
    
    print("\nüîπ SUPPORTED SMC ANALYSIS FORMAT:")
    print("   Your analysis should include these sections:")
    print("   ‚Ä¢ **Market Structure Analysis (HTF):**")
    print("   ‚Ä¢ **SMC Elements:**")
    print("   ‚Ä¢ **Directional Bias & Confluence:**")
    print("   ‚Ä¢ **Trading Plan:**")
    print("   ‚Ä¢ **Risk Factors & Invalidation:**")
    
    print("\nüîπ KEY IMPROVEMENTS MADE:")
    print("   ‚úÖ Enhanced regex patterns for entry zone extraction")
    print("   ‚úÖ Multiple pattern matching for stop loss")
    print("   ‚úÖ Improved take profit parsing")
    print("   ‚úÖ Better directional bias detection")
    print("   ‚úÖ Robust invalidation level extraction")
    
    print("\nüîπ MANUAL API TESTING:")
    print("   If you want to test via API directly:")
    print("   1. Make sure QNTI is running on port 5003")
    print("   2. POST to /api/vision-trading/process-analysis")
    print("   3. Include 'analysis_text' and 'symbol' in JSON")
    
    print("\nüîπ TROUBLESHOOTING:")
    print("   ‚Ä¢ Ensure analysis follows exact format above")
    print("   ‚Ä¢ Check that Entry Zone uses format: 'X.XXXX-X.XXXX'")
    print("   ‚Ä¢ Verify Stop Loss is clearly marked")
    print("   ‚Ä¢ Primary Bias should be 'Bearish' or 'Bullish'")

def main():
    """Main demonstration"""
    
    # Run parsing demonstration
    demonstrate_parsing_improvements()
    
    # Show usage guide
    show_usage_guide()
    
    print("\n\nüéâ VISION TRADING SYSTEM READY!")
    print("=" * 60)
    print("The parsing logic has been significantly improved and should now")
    print("correctly extract trading parameters from your SMC analysis format.")
    print("\nNext steps:")
    print("1. Restart QNTI system to load the fixes")
    print("2. Test with dashboard at http://localhost:5003")
    print("3. Upload charts and run vision analysis")
    print("4. Use the vision trading buttons when SMC analysis appears")

if __name__ == "__main__":
    main() 